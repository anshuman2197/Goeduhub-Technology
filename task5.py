# -*- coding: utf-8 -*-
"""Task5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sh0ZOnFiMg4JKtO1R6LuPihEs63N2gmx
"""

import numpy as np
import pandas as pd

"""## Load the IMDb Dataset and read"""

df=pd.read_csv('/content/IMDB-Movie-Data.csv')
df

"""## View the dataset"""

df.head()

"""## Understand some basic information about the dataset and Inspect the dataframe Inspect the dataframe's columns, shapes, variable types etc."""

df.tail(10)

df.shape

df.columns

df.size

df.ndim

df.axes

type(df)

type(df.values)

"""## Data Selection – Indexing and Slicing data"""

data = pd.Series(['a', 'b', 'c'], index=[1, 3, 5])
data

# explicit index when indexing
data[1]

# implicit index when slicing
data[1:3]

"""##                                                    or"""

#by loc method, the loc attribute allows indexing and slicing that always references the explicit index:
data.loc[1]

data.loc[1:3]

"""## or"""

# by iloc method, The iloc attribute allows indexing and slicing that always references the implicit Python-style index:
data.iloc[1]

data.iloc[1:3]

"""## Data Selection – Based on Conditional filtering"""

df=pd.read_csv('/content/IMDB-Movie-Data.csv')
df

df[['Rating','Votes','Metascore']]

df['Rating']>7

df1=df[df['Rating']>7]
df1

df1.shape

df1=df[df['Votes']==258682]
df1

df1=df[df['Metascore']<70]
df1

df1.shape

"""## Groupby operations"""

df=pd.read_csv('/content/IMDB-Movie-Data.csv')
df

df1=df.groupby('Votes')
df1

df2=df.groupby('Votes',sort=False)
df2.mean()

df3=df.groupby('Rating',sort=False)[['Metascore']].mean()
df3

df4=df.groupby('Actors')[['Rating']].mean()
df4

"""## Sorting operation"""

df_sorted=df.sort_values(by='Rating')
df_sorted

df.sort_index(ascending=False)

df1=df.sort_values(by=['Metascore','Votes'],ascending=[True,False])
df1

"""## Dealing with missing values"""

df=pd.read_csv('/content/IMDB-Movie-Data.csv')
df

df.describe()

"""## Dropping columns and null values"""

df = pd.DataFrame({"name": ['Alfred', 'Batman', 'Catwoman'],
                   "toy": [np.nan, 'Batmobile', 'Bullwhip'],
                   "born": [pd.NaT, pd.Timestamp("1940-04-25"),
                            pd.NaT]})
df

df.dropna()

df.dropna(axis='columns')

df.dropna(how='all')

df.dropna(thresh=2)

df.dropna(subset=['name', 'toy'])

df.dropna(inplace=True)
df

"""## Apply( ) functions"""

import pandas as pd

def add(a, b, c):
	return a + b + c
def main():
	data = {
			'A':[1, 2, 3],
			'B':[4, 5, 6],
			'C':[7, 8, 9] }
	df = pd.DataFrame(data)
	print("Original DataFrame:\n", df)
	
	df['add'] = df.apply(lambda row : add(row['A'],
					row['B'], row['C']), axis = 1)

print('\nAfter Applying Function: ')
print(df)

import pandas as pd
import numpy as np

def main():
	data = {
			'A':[1, 2, 3],
			'B':[4, 5, 6],
			'C':[7, 8, 9] }
	
	df = pd.DataFrame(data)
	print("Original DataFrame:\n", df)
	df['add'] = df.apply(np.sum, axis = 1)

print('\nAfter Applying Function: ')
print(df)

